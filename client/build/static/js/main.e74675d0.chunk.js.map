{"version":3,"sources":["context/computer-context.js","Containers/Computers/Computers.js","Containers/Computer/Computer.js","App.js","registerServiceWorker.js","index.js"],"names":["ComputerContext","React","createContext","computers","postComputer","getComputers","ComputerContextProvider","props","_useState","useState","_useState2","Object","slicedToArray","setComputers","react_default","a","createElement","Provider","value","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","axios","get","abrupt","sent","stop","apply","this","arguments","children","Computers","useEffect","response","fetch","json","console","log","fetchMyComputers","Fragment","className","length","map","computer","key","id","name","make","model","bits","cpu","ram","operating_system","ms_office","adobe","Computer","setName","_useState3","_useState4","setMake","_useState5","_useState6","setModel","_useState7","_useState8","setBits","_useState9","_useState10","setCpu","_useState11","_useState12","setRam","_useState13","_useState14","operatingSystem","setoperatingSystem","_useState15","_useState16","msOffice","setMsOffice","_useState17","_useState18","setAdobe","onSubmit","e","preventDefault","computerObject","post","htmlFor","type","onChange","target","withRouter","routes","react_router","path","exact","component","react_router_dom","to","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","computer_context","src_App","document","getElementById","URL","process","origin","addEventListener","concat","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e74675d0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nexport const ComputerContext = React.createContext({\n    computers: [],\n    postComputer: () => {},\n    getComputers: () => {}\n})\n\nconst ComputerContextProvider = props => {\n    const [computers, setComputers] = useState(null);\n\n    const getComputersHandler = () => {\n        let response = async () => await axios.get(\"/api/computer\");\n\n        setComputers(response)\n    }\n\n    const postComputerHandler = props => {\n        const response = async () => await axios.post(\"/api/computer\", props.computer)\n\n        console.log(\"POST RES: \", response)\n    }\n\n    return (\n        <ComputerContext.Provider value={{ getComputers: getComputersHandler }} >\n            {props.children}\n        </ComputerContext.Provider>\n    )\n}\n\nexport default ComputerContextProvider;","import React, { useEffect, useState } from \"react\"\nimport axios from \"axios\"\n\nimport \"./Computers.css\"\n\nconst Computers = () => {\n    let [computers, setComputers] = useState(\"\")\n\n    useEffect(() => {\n        const fetchMyComputers = async () => {\n            let response = await fetch('api/computer')\n            response = await response.json()\n            console.log(\"RES: \", response)\n            setComputers(response)\n        }\n\n        fetchMyComputers()\n    }, [])\n\n    return (\n        <>\n            <table className=\"computerTable\">\n                <thead>\n                    <tr>\n                        <th>name</th>\n                        <th>make</th>\n                        <th>model</th>\n                        <th>bits</th>\n                        <th>cpu</th>\n                        <th>ram</th>\n                        <th>OS</th>\n                        <th>MS Office</th>\n                        <th>Adobe</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {computers.length > 0 ? computers.map(computer => (\n                        <tr key={computer.id}>\n                            <td>{computer.name}</td>\n                            <td>{computer.make}</td>\n                            <td>{computer.model}</td>\n                            <td>{computer.bits}</td>\n                            <td>{computer.cpu}</td>\n                            <td>{computer.ram}</td>\n                            <td>{computer.operating_system}</td>\n                            <td>{computer.ms_office}</td>\n                            <td>{computer.adobe}</td>\n                        </tr>\n                    )) : null}\n                </tbody>\n            </table>\n        </>\n    )\n}\n\nexport default Computers;","import React, { useState, useContext, useCallback } from \"react\";\nimport { ComputerContext } from \"../../context/computer-context\"\nimport axios from \"axios\";\n\nconst Computer = (props) => {\n\n    let [name, setName] = useState(\"\")\n    let [make, setMake] = useState(\"\")\n    let [model, setModel] = useState(\"\")\n    let [bits, setBits] = useState(null)\n    let [cpu, setCpu] = useState(\"\")\n    let [ram, setRam] = useState(\"\")\n    let [operatingSystem, setoperatingSystem] = useState(\"\")\n    let [msOffice, setMsOffice] = useState(\"\")\n    let [adobe, setAdobe] = useState(\"\")\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        const computerObject = {\n            name: name,\n            make: make,\n            model: model,\n            bits: bits,\n            cpu: cpu,\n            ram: ram,\n            operating_system: operatingSystem,\n            ms_office: msOffice,\n            adobe: adobe,\n        }\n        axios.post(\"/api/computer\", computerObject)\n    }\n\n\n    return (\n        <div>\n            <form onSubmit={submitHandler}>\n                <div className=\"form-control\">\n                    <label htmlFor=\"name\">name</label>\n                    <input type=\"text\" id=\"name\" value={name} onChange={(e) => {\n                        setName(e.target.value)\n                    }} />\n                </div>\n                <div className=\"form-control\">\n                    <label htmlFor=\"make\">make</label>\n                    <input type=\"text\" id=\"make\" value={make} onChange={(e) => {\n                        setMake(e.target.value)\n                    }} />\n                </div>\n                <div className=\"form-control\">\n                    <label htmlFor=\"model\">model</label>\n                    <input type=\"text\" id=\"model\" value={model} onChange={(e) => {\n                        setModel(e.target.value)\n                    }} />\n                </div>\n                <div className=\"form-control\">\n                    <label htmlFor=\"bits\">bits</label>\n                    <input type=\"text\" id=\"bits\" value={bits} onChange={(e) => {\n                        setBits(e.target.value)\n                    }} />\n                </div>\n                <div className=\"form-control\">\n                    <label htmlFor=\"cpu\">cpu</label>\n                    <input type=\"text\" id=\"cpu\" value={cpu} onChange={(e) => {\n                        setCpu(e.target.value)\n                    }} />\n                </div>\n                <div className=\"form-control\">\n                    <label htmlFor=\"ram\">ram</label>\n                    <input type=\"text\" id=\"ram\" value={ram} onChange={(e) => {\n                        setRam(e.target.value)\n                    }} />\n                </div>\n                <div className=\"form-control\">\n                    <label htmlFor=\"operatingSystem\">operatingSystem</label>\n                    <input type=\"text\" id=\"operatingSystem\" value={operatingSystem} onChange={(e) => {\n                        setoperatingSystem(e.target.value)\n                    }} />\n                </div>\n                <div className=\"form-control\">\n                    <label htmlFor=\"msOffice\">msOffice</label>\n                    <input type=\"text\" id=\"msOffice\" value={msOffice} onChange={(e) => {\n                        setMsOffice(e.target.value)\n                    }} />\n                </div>\n                <div className=\"form-control\">\n                    <label htmlFor=\"adobe\">adobe</label>\n                    <input type=\"text\" id=\"adobe\" value={adobe} onChange={(e) => {\n                        setAdobe(e.target.value)\n                    }} />\n                </div>\n                <div className=\"formActions\">\n                    <button type=\"submit\">Add Computer</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default Computer","import React from \"react\";\nimport { Route, Switch, withRouter, Link } from \"react-router-dom\"\nimport Computers from \"./Containers/Computers/Computers\"\nimport Computer from \"./Containers/Computer/Computer\"\n\n\nconst App = () => {\n  let routes = (\n    <Switch>\n      <Route path=\"/\" exact component={Computers} />\n      <Route path=\"/computer\" exact component={Computer} />\n    </Switch>\n  )\n  return (\n    <>\n      <div className=\"header\">\n        <div><Link to=\"/\">Computers</Link></div>\n        <div>\n          <Link to=\"/computer\">Add a computer</Link></div>\n      </div>\n      {routes}\n    </>\n  )\n}\n\nexport default withRouter(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport ComputerContextProvider from \"./context/computer-context\"\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<ComputerContextProvider><BrowserRouter><App /></BrowserRouter></ComputerContextProvider>, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}